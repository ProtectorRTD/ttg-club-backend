name: Deploy TTG Club Backend

on:
  push:
    branches:
      - main
      - dev

  workflow_dispatch:

permissions:
  deployments: write
  contents: read
  pages: write
  actions: write
  id-token: write

concurrency:
  group: ${{ github.ref }}-${{ github.action }}
  cancel-in-progress: true

jobs:
  build-front:
    name: Build frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: TTG-Club/ttg-club-frontend
          ref: ${{ github.ref_name }}

      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install & Build Dev application
        if: ${{ github.ref_name == 'dev' }}
        env:
          VUE_APP_DEV: true
        run: |
          npm ci
          npm run lint:fix
          npm run build:dev

      - name: Install & Build Prod application
        if: ${{ github.ref_name == 'main' }}
        run: |
          npm ci
          npm run lint:fix
          npm run build:prod

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: front-app
          path: ./dist
          retention-days: 1
          if-no-files-found: error

  build:
    name: Build and deploy backend
    needs: build-front
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Extract front application
        uses: actions/download-artifact@v3
        with:
          name: front-app
          path: ./src/main/resources/static/

      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Maven Install
        run: mvn -B clean install -DskipTests

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: magistrus/dnd5club:latest

      - name: Run Dev Docker to SSH
        if: ${{ github.ref_name == 'dev' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            docker stop devdnd5club && docker rm devdnd5club
            docker pull magistrus/dnd5club:latest
            docker run --network dev-dnd5-mysql-new --name devdnd5club -p 9393:8080 -d -e spring.profiles.active=dev -e dbhost=mysql-dev -e dbport=3306  -e dbuser=${{ secrets.DB_USER  }} -e dbpassword=${{ secrets.DB_PASSWORD }} -e emailpassword=${{ secrets.EMAIL_PASSWORD }} -e dbname=dnd5 magistrus/dnd5club
            docker rmi $(docker images --filter "dangling=true" -q --no-trunc) &

      - name: Run Prod Docker to SSH
        if: ${{ github.ref_name == 'main' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            docker stop dnd5club && docker rm dnd5club
            docker pull magistrus/dnd5club:latest
            docker run --network dnd5-mysql-new --name dnd5club -p 9090:8080 -d -e spring.profiles.active=prod -e dbhost=mysql-new -e dbport=3306  -e dbuser=${{ secrets.DB_USER  }} -e dbpassword=${{ secrets.DB_PASSWORD }} -e emailpassword=${{ secrets.EMAIL_PASSWORD }} -e dbname=dnd5 magistrus/dnd5club
            docker rmi $(docker images --filter "dangling=true" -q --no-trunc) &
